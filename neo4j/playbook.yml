- name: Connect to Pulumi created EC2 instance and install docker and run neo4j
  hosts: all
  gather_facts: no
  remote_user: ubuntu
  become: yes

  tasks:
    - name: Fetch bolt_private_ip
      shell: pulumi stack output bolt_private_ip
      register: pulumi_bolt_private_ip
      delegate_to: "localhost"
      become: no

    - name: Fetch http_private_ip
      shell: pulumi stack output http_private_ip
      register: pulumi_http_private_ip
      delegate_to: "localhost"
      become: no

    - name: Fetch public_ipv4_bolt
      shell: pulumi stack output public_ipv4_bolt
      register: pulumi_public_ipv4_bolt
      delegate_to: "localhost"
      become: no

    - name: Fetch public_ipv4_primary
      shell: pulumi stack output public_ipv4_primary
      register: pulumi_public_ipv4_primary
      delegate_to: "localhost"
      become: no

    - name: Fetch http_private_ip
      shell: pulumi stack --show-name
      register: pulumi_stack_name
      delegate_to: "localhost"
      become: no

    - set_fact:
        neo4j_home: /root/neo4j
        runtime_user: 7474
        runtime_user_group: 7474
        bolt_private_ip: "{{ pulumi_bolt_private_ip.stdout }}"
        http_private_ip: "{{ pulumi_http_private_ip.stdout }}"
        public_ipv4_primary: "{{ pulumi_public_ipv4_primary.stdout }}"
        public_ipv4_bolt: "{{ pulumi_public_ipv4_bolt.stdout }}"
        bolt_port: 7687 # bolt port supports TLS and non-TLS. Config passed to docker ensures TLS
        neo4j_secure_port: 7473
        stack_name: "{{ pulumi_stack_name.stdout }}"

    - name: Load neo4j stack config
      ansible.builtin.include_vars: neo4j_{{stack_name}}_conf.yml

    - name: Update all packages to their latest version
      apt:
        name: "*"
        state: latest
        update_cache: yes
  
    - name: Installing packages - known 'No package matching' issue. Just run ./go.sh again
      apt:
        pkg:
        - awscli
        - python3-apt # needed by ansible's apt command to install .deb urls. i.e. cloudwatch agent
        - docker.io

    - name: Certificates locations
      file:
        path: "{{neo4j_home}}/certificates/{{item}}"
        state: directory
        mode: '0750'
        owner: "{{ runtime_user }}"
        group: "{{ runtime_user_group }}"
      loop:
        - bolt/revoked
        - bolt/trusted
        - https/revoked
        - https/trusted
    
    - name: Conf location
      file:
        path: "{{neo4j_home}}/conf"
        state: directory
        mode: '0750'
        owner: "{{ runtime_user }}"
        group: "{{ runtime_user_group }}"
    
    - name: Config file
      template:
        src: templates/neo4j.conf
        dest: "{{neo4j_home}}/conf/neo4j.conf"
        owner: "{{ runtime_user }}"
        group: "{{ runtime_user_group }}"
        mode: 0644

    - name: Fetch AWS secret
      shell: "aws --region eu-west-2 secretsmanager get-secret-value --secret-id {{secret_name}} > {{neo4j_home}}/secret"

    - name: Extract certificates from secret
      shell: "cd {{neo4j_home}}; cat secret | /usr/bin/python3 -c \"import json,sys;d=json.load(sys.stdin);print(d['SecretString'])\"| base64 -d | /usr/bin/tar xvz"

    - name: Move certificates and keys into correct places
      shell: |
        cd {{neo4j_home}}
        cp privkey1.pem certificates/https/private.key
        mv privkey1.pem certificates/bolt/private.key
        cp fullchain1.pem certificates/https/public.crt
        cp fullchain1.pem certificates/bolt/public.crt
        mv fullchain1.pem certificates/bolt/trusted/public.crt
        chown -R {{runtime_user}}:{{runtime_user_group}} certificates

    - name: Run Neo4j in docker with --restart unless-stopped - TODO make this idempotent
      shell: |
        /usr/bin/docker run \
        --publish={{http_private_ip}}:443:{{neo4j_secure_port}} \
        --publish={{bolt_private_ip}}:443:{{bolt_port}} \
        --volume={{neo4j_home}}/certificates:/ssl \
        --volume={{neo4j_home}}/conf:/conf \
        --volume={{neo4j_home}}/data:/data \
        --volume={{neo4j_home}}/logs:/logs \
        --env NEO4J_AUTH=neo4j/{{neo4j_password}} \
        --restart unless-stopped \
        --detach \
        neo4j:5.17.0

    - debug:
        msg: "Update your DNS.... {{public_ipv4_primary}} -> {{https_dns_name}} and {{public_ipv4_bolt}} -> {{bolt_dns_name}}"

